{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of    product_type_beef  price_per_one_kg_beef location_beef  \\\n",
       "0              bacon                   7.25       alberta   \n",
       "1        blade roast                  18.49       alberta   \n",
       "2    broiler chicken                   7.41       alberta   \n",
       "3        ground beef                  12.50       alberta   \n",
       "4         pork chops                  12.39        quebec   \n",
       "5    prime rib roast                  37.09       alberta   \n",
       "6        round steak                  18.39       alberta   \n",
       "7      sirloin steak                  24.45       alberta   \n",
       "8       stewing beef                  18.31       alberta   \n",
       "9            wieners                   4.47             0   \n",
       "10                 0                   0.00             0   \n",
       "11                 0                   0.00             0   \n",
       "12                 0                   0.00             0   \n",
       "13                 0                   0.00             0   \n",
       "14                 0                   0.00             0   \n",
       "15                 0                   0.00             0   \n",
       "16                 0                   0.00             0   \n",
       "17                 0                   0.00             0   \n",
       "18                 0                   0.00             0   \n",
       "19                 0                   0.00             0   \n",
       "20                 0                   0.00             0   \n",
       "21                 0                   0.00             0   \n",
       "\n",
       "    produce_lifetime_days_beef product_type_dairy  price_per_litre_kg  \\\n",
       "0                          7.0        chicken egg                1.45   \n",
       "1                          5.0               milk                0.75   \n",
       "2                          2.0                  0                0.00   \n",
       "3                          5.0                  0                0.00   \n",
       "4                          5.0                  0                0.00   \n",
       "5                          5.0                  0                0.00   \n",
       "6                          5.0                  0                0.00   \n",
       "7                          5.0                  0                0.00   \n",
       "8                          5.0                  0                0.00   \n",
       "9                          7.0                  0                0.00   \n",
       "10                         0.0                  0                0.00   \n",
       "11                         0.0                  0                0.00   \n",
       "12                         0.0                  0                0.00   \n",
       "13                         0.0                  0                0.00   \n",
       "14                         0.0                  0                0.00   \n",
       "15                         0.0                  0                0.00   \n",
       "16                         0.0                  0                0.00   \n",
       "17                         0.0                  0                0.00   \n",
       "18                         0.0                  0                0.00   \n",
       "19                         0.0                  0                0.00   \n",
       "20                         0.0                  0                0.00   \n",
       "21                         0.0                  0                0.00   \n",
       "\n",
       "   location_dairy  produce_lifetime_days_dairy product_type_fruit  \\\n",
       "0          quebec                         14.0              apple   \n",
       "1          quebec                          7.0            apricot   \n",
       "2               0                          0.0            avocado   \n",
       "3               0                          0.0             banana   \n",
       "4               0                          0.0          blueberry   \n",
       "5               0                          0.0           cherries   \n",
       "6               0                          0.0          cranberry   \n",
       "7               0                          0.0         grapefruit   \n",
       "8               0                          0.0             grapes   \n",
       "9               0                          0.0              guava   \n",
       "10              0                          0.0             orange   \n",
       "11              0                          0.0             papaya   \n",
       "12              0                          0.0              peach   \n",
       "13              0                          0.0               pear   \n",
       "14              0                          0.0          Pineapple   \n",
       "15              0                          0.0               Plum   \n",
       "16              0                          0.0        Pomegranate   \n",
       "17              0                          0.0            Pumpkin   \n",
       "18              0                          0.0          Raspberry   \n",
       "19              0                          0.0         Strawberry   \n",
       "20              0                          0.0         Watermelon   \n",
       "21              0                          0.0                  0   \n",
       "\n",
       "    price_per_kg_fruit location_fruit  produce_lifetime_days_fruit  \\\n",
       "0                 4.00         quebec                          7.0   \n",
       "1                 4.38         quebec                          4.0   \n",
       "2                 1.00         quebec                          4.0   \n",
       "3                 1.56         quebec                          2.0   \n",
       "4                10.00         quebec                          6.0   \n",
       "5                 9.00         quebec                          2.0   \n",
       "6                 2.00         quebec                          6.0   \n",
       "7                 4.28         quebec                          6.0   \n",
       "8                 4.00         quebec                          4.0   \n",
       "9                 4.36         quebec                          9.0   \n",
       "10                4.26         quebec                          6.0   \n",
       "11                3.24         quebec                          7.0   \n",
       "12                2.00         quebec                          6.0   \n",
       "13                4.00         quebec                          6.0   \n",
       "14                0.00              0                          4.0   \n",
       "15                0.00              0                          6.0   \n",
       "16                0.00              0                          0.0   \n",
       "17                0.00              0                          0.0   \n",
       "18                0.00              0                          0.0   \n",
       "19                0.00              0                          2.0   \n",
       "20                0.00              0                          6.0   \n",
       "21                0.00              0                          0.0   \n",
       "\n",
       "   product_type_grain  price_per_bushel_grain location_grain  \\\n",
       "0              barley                    3.65       manitoba   \n",
       "1              canola                    9.98       manitoba   \n",
       "2                corn                    3.90       manitoba   \n",
       "3            flaxseed                   12.73       manitoba   \n",
       "4                oats                    3.03              0   \n",
       "5                peas                    6.04              0   \n",
       "6             soybean                   10.13              0   \n",
       "7               wheat                    6.04              0   \n",
       "8                   0                    0.00              0   \n",
       "9                   0                    0.00              0   \n",
       "10                  0                    0.00              0   \n",
       "11                  0                    0.00              0   \n",
       "12                  0                    0.00              0   \n",
       "13                  0                    0.00              0   \n",
       "14                  0                    0.00              0   \n",
       "15                  0                    0.00              0   \n",
       "16                  0                    0.00              0   \n",
       "17                  0                    0.00              0   \n",
       "18                  0                    0.00              0   \n",
       "19                  0                    0.00              0   \n",
       "20                  0                    0.00              0   \n",
       "21                  0                    0.00              0   \n",
       "\n",
       "    produce_lifetime_days_grain product_type_vegetables  \\\n",
       "0                          30.0               artichoke   \n",
       "1                          30.0               asparagus   \n",
       "2                          30.0                  garlic   \n",
       "3                          30.0             green beans   \n",
       "4                          30.0                   beets   \n",
       "5                          30.0             bell pepper   \n",
       "6                          30.0                broccoli   \n",
       "7                          30.0         brussel sprouts   \n",
       "8                           0.0                 cabbage   \n",
       "9                           0.0                 carrots   \n",
       "10                          0.0             cauliflower   \n",
       "11                          0.0                  celery   \n",
       "12                          0.0                 cucmber   \n",
       "13                          0.0                    kale   \n",
       "14                          0.0                 lettuce   \n",
       "15                          0.0                   onion   \n",
       "16                          0.0                 parsnip   \n",
       "17                          0.0                  potato   \n",
       "18                          0.0                 spinach   \n",
       "19                          0.0                  tomato   \n",
       "20                          0.0                       0   \n",
       "21                          0.0                       0   \n",
       "\n",
       "    price_per_kg_vegetables location_vegetables  \\\n",
       "0                     10.40        saskatchewan   \n",
       "1                      4.50        saskatchewan   \n",
       "2                      6.00        saskatchewan   \n",
       "3                      8.00        saskatchewan   \n",
       "4                      1.00        saskatchewan   \n",
       "5                      4.00        saskatchewan   \n",
       "6                      2.00        saskatchewan   \n",
       "7                      7.00        saskatchewan   \n",
       "8                      2.25        saskatchewan   \n",
       "9                      1.00        saskatchewan   \n",
       "10                     7.00        saskatchewan   \n",
       "11                     6.00        saskatchewan   \n",
       "12                     2.00        saskatchewan   \n",
       "13                    12.00        saskatchewan   \n",
       "14                     3.65        saskatchewan   \n",
       "15                     1.00        saskatchewan   \n",
       "16                     6.00        saskatchewan   \n",
       "17                     3.75        saskatchewan   \n",
       "18                    10.00        saskatchewan   \n",
       "19                     2.00        saskatchewan   \n",
       "20                     0.00        saskatchewan   \n",
       "21                     0.00        saskatchewan   \n",
       "\n",
       "    produce_lifetime_days_vegetables  \n",
       "0                                  2  \n",
       "1                                  2  \n",
       "2                                  7  \n",
       "3                                  6  \n",
       "4                                  7  \n",
       "5                                  7  \n",
       "6                                  2  \n",
       "7                                  6  \n",
       "8                                  7  \n",
       "9                                  7  \n",
       "10                                 6  \n",
       "11                                 7  \n",
       "12                                 4  \n",
       "13                                 7  \n",
       "14                                 4  \n",
       "15                                 7  \n",
       "16                                 7  \n",
       "17                                 7  \n",
       "18                                 7  \n",
       "19                                 6  \n",
       "20                                 6  \n",
       "21                                 4  >"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "\n",
    "\n",
    "df_community = pd.read_csv('/Users/cinema/Desktop/nunavut_communities_data.csv').fillna(0)\n",
    "\n",
    "df_price_list = pd.read_csv('/Users/cinema/Desktop/fresh_produce_dataset.csv').fillna(0)\n",
    "\n",
    "df_community.head\n",
    "df_price_list.head\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of 0           artichoke\n",
       "1           asparagus\n",
       "2              garlic\n",
       "3         green beans\n",
       "4               beets\n",
       "5         bell pepper\n",
       "6            broccoli\n",
       "7     brussel sprouts\n",
       "8             cabbage\n",
       "9             carrots\n",
       "10        cauliflower\n",
       "11             celery\n",
       "12            cucmber\n",
       "13               kale\n",
       "14            lettuce\n",
       "15              onion\n",
       "16            parsnip\n",
       "17             potato\n",
       "18            spinach\n",
       "19             tomato\n",
       "20                  0\n",
       "21                  0\n",
       "Name: product_type_vegetables, dtype: object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "\n",
    "\n",
    "df_community = pd.read_csv('/Users/cinema/Desktop/nunavut_communities_data.csv').fillna(0)\n",
    "\n",
    "df_price_list = pd.read_csv('/Users/cinema/Desktop/fresh_produce_dataset.csv').fillna(0)\n",
    "\n",
    "#get produce values from our fresh_produce_dataset.\n",
    "#beef\n",
    "product_type_beef = df_price_list['product_type_beef']\n",
    "location_beef = df_price_list['location_beef']\n",
    "price_per_one_kg_beef = df_price_list['price_per_one_kg_beef']\n",
    "produce_lifetime_days_beef = df_price_list['produce_lifetime_days_beef']\n",
    "\n",
    "\n",
    "#dairy\n",
    "product_type_dairy = df_price_list['product_type_dairy']\n",
    "location_dairy = df_price_list['location_dairy']\n",
    "price_per_one_kg_dairy = df_price_list['price_per_litre_kg']\n",
    "produce_lifetime_days_dairy = df_price_list['produce_lifetime_days_dairy']\n",
    "\n",
    "#fruit\n",
    "product_type_fruit = df_price_list['product_type_fruit']\n",
    "location_fruit = df_price_list['location_fruit']\n",
    "price_per_one_kg_fruit = df_price_list['price_per_kg_fruit']\n",
    "produce_lifetime_days_fruit = df_price_list['produce_lifetime_days_fruit']\n",
    "\n",
    "\n",
    "#grain\n",
    "product_type_grain = df_price_list['product_type_grain']\n",
    "location_grain = df_price_list['location_grain']\n",
    "price_per_bushel_grain = df_price_list['price_per_bushel_grain']\n",
    "produce_lifetime_days_grain = df_price_list['produce_lifetime_days_grain']\n",
    "\n",
    "#vegetable\n",
    "product_type_vegetables = df_price_list['product_type_vegetables']\n",
    "location_vegetables = df_price_list['location_vegetables']\n",
    "price_per_one_kg_vegetables = df_price_list['price_per_kg_vegetables']\n",
    "produce_lifetime_days_vegetables = df_price_list['produce_lifetime_days_vegetables']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getProducePriceMinOverhead(collectProduce, total):\n",
    "    return collectProduce - total\n",
    "\n",
    "#method for collecting a specific row in a column for a specific produce\n",
    "def collectProduce(produce, produce_shelflife, produce_price_per_kg):\n",
    "    df_produce = produce\n",
    "    df_shelflife = float(produce_shelflife)\n",
    "    df_produce_price = float(produce_price_per_kg)\n",
    "    price_per_60000_kg = df_produce_price * 60000\n",
    "    return price_per_60000_kg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#overhead costs\n",
    "personnel_cost = df_community['personnel_cost']\n",
    "storage_cost = df_community['storage_cost']\n",
    "air_freight_cost = df_community['freightfare_per_region_based_off_kg_of_food_allocated']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_overhead = 679279.16\n",
    "total_kg = 60000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#produce cost for 60,000 KG worth of different produce. \n",
    "#beef\n",
    "\n",
    "bacon = collectProduce(product_type_beef[0], produce_lifetime_days_beef[0], price_per_one_kg_beef[0])\n",
    "blade_roast = collectProduce(product_type_beef[1], produce_lifetime_days_beef[1], price_per_one_kg_beef[1])\n",
    "broiler_chicken = collectProduce(product_type_beef[2], produce_lifetime_days_beef[2], price_per_one_kg_beef[2])\n",
    "ground_beef = collectProduce(product_type_beef[3], produce_lifetime_days_beef[3], price_per_one_kg_beef[3])\n",
    "pork_chops = collectProduce(product_type_beef[4], produce_lifetime_days_beef[4], price_per_one_kg_beef[4])\n",
    "prime_rib_roast = collectProduce(product_type_beef[5], produce_lifetime_days_beef[5], price_per_one_kg_beef[5])\n",
    "round_steak = collectProduce(product_type_beef[6], produce_lifetime_days_beef[6], price_per_one_kg_beef[6])\n",
    "sirloin_steak = collectProduce(product_type_beef[7], produce_lifetime_days_beef[7], price_per_one_kg_beef[7])\n",
    "stewing_beef = collectProduce(product_type_beef[8], produce_lifetime_days_beef[8], price_per_one_kg_beef[8])\n",
    "wieners = collectProduce(product_type_beef[9], produce_lifetime_days_beef[9], price_per_one_kg_beef[9])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#group all current retail prices of beef types into one list\n",
    "beef = [bacon,blade_roast,broiler_chicken,ground_beef,pork_chops,prime_rib_roast,round_steak,sirloin_steak, stewing_beef, wieners]\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total overhead cost subtracted from the total cost of 60,000 kg of beef \n",
    "bacon_tot_min_overhead_cost = getProducePriceMinOverhead(bacon, total_overhead)\n",
    "blade_roast_tot_min_overhead_cost = getProducePriceMinOverhead(blade_roast, total_overhead)\n",
    "broiler_chicken_tot_min_overhead_cost = getProducePriceMinOverhead(broiler_chicken, total_overhead)\n",
    "ground_beef_tot_min_overhead_cost = getProducePriceMinOverhead(ground_beef, total_overhead)\n",
    "pork_chops_tot_min_overhead_cost = getProducePriceMinOverhead(pork_chops, total_overhead)\n",
    "prime_rib_tot_min_overhead_cost = getProducePriceMinOverhead(prime_rib_roast, total_overhead)\n",
    "round_steak_tot_min_overhead_cost = getProducePriceMinOverhead(round_steak, total_overhead)\n",
    "sirloin_steak_tot_min_overhead_cost = getProducePriceMinOverhead(sirloin_steak, total_overhead)\n",
    "stewing_beef_tot_min_overhead_cost = getProducePriceMinOverhead(stewing_beef, total_overhead)\n",
    "wieners_tot_min_overhead_cost = getProducePriceMinOverhead(wieners, total_overhead)\n",
    "\n",
    "produce_60k_kg_min_tot_overhead_costs_list = [bacon_tot_min_overhead_cost,blade_roast_tot_min_overhead_cost,broiler_chicken_tot_min_overhead_cost, ground_beef_tot_min_overhead_cost, pork_chops_tot_min_overhead_cost, prime_rib_tot_min_overhead_cost, round_steak_tot_min_overhead_cost, sirloin_steak_tot_min_overhead_cost, stewing_beef_tot_min_overhead_cost,wieners_tot_min_overhead_cost   ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adjusted price is TOC from above divided by total produce size in KG to determine cost per unit and identify discount percentage. \n",
    "adj_bacon = getProducePriceMinOverhead(bacon, total_overhead) / total_kg\n",
    "adj_blade_roast = getProducePriceMinOverhead(blade_roast, total_overhead) / total_kg\n",
    "adj_broiler_chicken = getProducePriceMinOverhead(broiler_chicken, total_overhead) / total_kg\n",
    "adj_ground_beef = getProducePriceMinOverhead(ground_beef, total_overhead) / total_kg\n",
    "adj_pork_chops = getProducePriceMinOverhead(pork_chops, total_overhead) / total_kg\n",
    "adj_prime_rib_roast = getProducePriceMinOverhead(prime_rib_roast, total_overhead) / total_kg\n",
    "adj_round_steak = getProducePriceMinOverhead(round_steak, total_overhead) / total_kg\n",
    "adj_sirloin_steak = getProducePriceMinOverhead(sirloin_steak, total_overhead) / total_kg\n",
    "adj_stewing_beef = getProducePriceMinOverhead(stewing_beef, total_overhead) / total_kg\n",
    "adj_wieners = getProducePriceMinOverhead(wieners, total_overhead) / total_kg\n",
    "\n",
    "new_price_per_kg_of_produce = [adj_bacon,adj_blade_roast,adj_broiler_chicken,adj_ground_beef,adj_pork_chops,adj_prime_rib_roast,adj_round_steak,adj_sirloin_steak, adj_stewing_beef, adj_wieners]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#dairy\n",
    "chicken_eggs = collectProduce(product_type_dairy[0],produce_lifetime_days_dairy[0],price_per_one_kg_dairy[0])\n",
    "milk = collectProduce(product_type_dairy[1],produce_lifetime_days_dairy[1],price_per_one_kg_dairy[1])\n",
    "\n",
    "#total overhead cost subtracted from the total cost of 60,000 kg of dairy \n",
    "chicken_egg_min_overhead = getProducePriceMinOverhead(chicken_eggs, total_kg)\n",
    "milk_min_overhead = getProducePriceMinOverhead(milk, total_kg)\n",
    "\n",
    "#adjusted price is TOC from above divided by total produce size in KG to determine cost per unit and identify discount percentage. \n",
    "#adjusted cost per unit of 60,000 kg of produce after subtracting overhead. \n",
    "adj_chicken_egg = chicken_egg_min_overhead / total_kg\n",
    "adj_milk = milk_min_overhead / total_kg\n",
    "\n",
    "dairy_adj_price_list = [adj_chicken_egg, adj_milk]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fruit\n",
    "apple = collectProduce(product_type_fruit[0],produce_lifetime_days_fruit[0],price_per_one_kg_fruit[0])\n",
    "apricot = collectProduce(product_type_fruit[1],produce_lifetime_days_fruit[1],price_per_one_kg_fruit[1]) \n",
    "avocado = collectProduce(product_type_fruit[2],produce_lifetime_days_fruit[2],price_per_one_kg_fruit[2])\n",
    "banana = collectProduce(product_type_fruit[3],produce_lifetime_days_fruit[3],price_per_one_kg_fruit[3])\n",
    "blueberry = collectProduce(product_type_fruit[4],produce_lifetime_days_fruit[4],price_per_one_kg_fruit[4])\n",
    "cherries = collectProduce(product_type_fruit[5],produce_lifetime_days_fruit[5],price_per_one_kg_fruit[5])\n",
    "cranberry = collectProduce(product_type_fruit[6],produce_lifetime_days_fruit[6],price_per_one_kg_fruit[6])\n",
    "grapefruit = collectProduce(product_type_fruit[7],produce_lifetime_days_fruit[7],price_per_one_kg_fruit[7])\n",
    "grapes = collectProduce(product_type_fruit[8],produce_lifetime_days_fruit[8],price_per_one_kg_fruit[8])\n",
    "guava = collectProduce(product_type_fruit[9],produce_lifetime_days_fruit[9],price_per_one_kg_fruit[9])\n",
    "orange = collectProduce(product_type_fruit[10],produce_lifetime_days_fruit[10],price_per_one_kg_fruit[10])\n",
    "papaya = collectProduce(product_type_fruit[11],produce_lifetime_days_fruit[11],price_per_one_kg_fruit[11])\n",
    "peach = collectProduce(product_type_fruit[12],produce_lifetime_days_fruit[12],price_per_one_kg_fruit[12])\n",
    "pear = collectProduce(product_type_fruit[13],produce_lifetime_days_fruit[13],price_per_one_kg_fruit[13])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total overhead cost subtracted from the total cost of 60,000 kg of fruit.\n",
    "apple_min_overhead = getProducePriceMinOverhead(apple, total_kg)\n",
    "apricot_min_overhead = getProducePriceMinOverhead(apricot, total_kg)\n",
    "avocado_min_overhead = getProducePriceMinOverhead(avocado, total_kg)\n",
    "banana_min_overhead = getProducePriceMinOverhead(banana, total_kg)\n",
    "blueberry_min_overhead = getProducePriceMinOverhead(blueberry, total_kg)\n",
    "cherries_min_overhead = getProducePriceMinOverhead(cherries, total_kg)\n",
    "cranberry_min_overhead = getProducePriceMinOverhead(cranberry, total_kg)\n",
    "grapefruit_min_overhead = getProducePriceMinOverhead(grapefruit, total_kg)\n",
    "grapes_min_overhead = getProducePriceMinOverhead(grapes, total_kg)\n",
    "guava_min_overhead = getProducePriceMinOverhead(guava, total_kg)\n",
    "orange_min_overhead = getProducePriceMinOverhead(orange, total_kg)\n",
    "papaya_min_overhead = getProducePriceMinOverhead(papaya, total_kg) \n",
    "peach_min_overhead = getProducePriceMinOverhead(peach, total_kg)\n",
    "pear_min_overhead = getProducePriceMinOverhead(pear, total_kg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adjusted cost per unit of 60,000 kg of produce after subtracting overhead.\n",
    "\n",
    "adj_apple = apple_min_overhead / total_kg\n",
    "adj_apricot = apricot_min_overhead / total_kg\n",
    "adj_avocado = avocado_min_overhead / total_kg\n",
    "adj_banana = banana_min_overhead / total_kg\n",
    "adj_blueberry = blueberry_min_overhead / total_kg\n",
    "adj_cherries = cherries_min_overhead / total_kg\n",
    "adj_cranberry = cranberry_min_overhead / total_kg\n",
    "adj_grapefruit = grapefruit_min_overhead / total_kg\n",
    "adj_grapes = grapes_min_overhead / total_kg\n",
    "adj_guava = guava_min_overhead / total_kg\n",
    "adj_orange = orange_min_overhead / total_kg\n",
    "adj_papaya = papaya_min_overhead / total_kg\n",
    "adj_peach = peach_min_overhead / total_kg\n",
    "adj_pear = pear_min_overhead / total_kg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#grain\n",
    "barley = collectProduce(product_type_grain[0],produce_lifetime_days_grain[0],price_per_bushel_grain[0])\n",
    "canola = collectProduce(product_type_grain[1],produce_lifetime_days_grain[1],price_per_bushel_grain[1])\n",
    "corn = collectProduce(product_type_grain[2],produce_lifetime_days_grain[2],price_per_bushel_grain[2])\n",
    "flaxseed = collectProduce(product_type_grain[3],produce_lifetime_days_grain[3],price_per_bushel_grain[3])\n",
    "oats = collectProduce(product_type_grain[4],produce_lifetime_days_grain[4],price_per_bushel_grain[4])\n",
    "peas = collectProduce(product_type_grain[5],produce_lifetime_days_grain[5],price_per_bushel_grain[5])\n",
    "soybean = collectProduce(product_type_grain[6],produce_lifetime_days_grain[6],price_per_bushel_grain[6])\n",
    "wheat = collectProduce(product_type_grain[7],produce_lifetime_days_grain[7],price_per_bushel_grain[7])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total overhead cost subtracted from the total cost of 60,000 kg of grain. \n",
    "barley_min_overhead = getProducePriceMinOverhead(barley, total_kg)\n",
    "canola_min_overhead = getProducePriceMinOverhead(canola, total_kg)\n",
    "corn_min_overhead = getProducePriceMinOverhead(corn, total_kg)\n",
    "flaxseed_min_overhead = getProducePriceMinOverhead(flaxseed, total_kg)\n",
    "oats_min_overhead = getProducePriceMinOverhead(oats, total_kg)\n",
    "peas_min_overhead = getProducePriceMinOverhead(peas, total_kg)\n",
    "soybean_min_overhead = getProducePriceMinOverhead(soybean, total_kg)\n",
    "wheat_min_overhead = getProducePriceMinOverhead(wheat, total_kg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adjusted cost per unit of 60,000 kg of produce after subtracting overhead.\n",
    "\n",
    "barley = barley_min_overhead / total_kg\n",
    "canola = canola_min_overhead / total_kg\n",
    "corn = corn_min_overhead / total_kg\n",
    "flaxseed = flaxseed_min_overhead / total_kg\n",
    "oats = oats_min_overhead / total_kg\n",
    "peas = peas_min_overhead / total_kg\n",
    "soybean = soybean_min_overhead / total_kg\n",
    "wheat = wheat_min_overhead / total_kg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#vegetables\n",
    "artichoke = collectProduce(product_type_vegetables[0],produce_lifetime_days_vegetables[0],price_per_one_kg_vegetables[0])\n",
    "asparagus = collectProduce(product_type_vegetables[1],produce_lifetime_days_vegetables[1],price_per_one_kg_vegetables[1])\n",
    "garlic = collectProduce(product_type_vegetables[2],produce_lifetime_days_vegetables[2],price_per_one_kg_vegetables[2])\n",
    "green_beans = collectProduce(product_type_vegetables[3],produce_lifetime_days_vegetables[3],price_per_one_kg_vegetables[3])\n",
    "beets = collectProduce(product_type_vegetables[4],produce_lifetime_days_vegetables[4],price_per_one_kg_vegetables[4])\n",
    "bell_peppers = collectProduce(product_type_vegetables[5],produce_lifetime_days_vegetables[5],price_per_one_kg_vegetables[5]) \n",
    "broccoli = collectProduce(product_type_vegetables[6],produce_lifetime_days_vegetables[6],price_per_one_kg_vegetables[6])\n",
    "brussel_sprouts = collectProduce(product_type_vegetables[7],produce_lifetime_days_vegetables[7],price_per_one_kg_vegetables[7])\n",
    "cabbage = collectProduce(product_type_vegetables[8],produce_lifetime_days_vegetables[8],price_per_one_kg_vegetables[8])\n",
    "carrots = collectProduce(product_type_vegetables[9],produce_lifetime_days_vegetables[9],price_per_one_kg_vegetables[9])\n",
    "cauliflower = collectProduce(product_type_vegetables[10],produce_lifetime_days_vegetables[10],price_per_one_kg_vegetables[10])\n",
    "celery = collectProduce(product_type_vegetables[11],produce_lifetime_days_vegetables[11],price_per_one_kg_vegetables[11])\n",
    "cucumber = collectProduce(product_type_vegetables[12],produce_lifetime_days_vegetables[12],price_per_one_kg_vegetables[12])\n",
    "kale = collectProduce(product_type_vegetables[13],produce_lifetime_days_vegetables[13],price_per_one_kg_vegetables[13])\n",
    "lettuce = collectProduce(product_type_vegetables[14],produce_lifetime_days_vegetables[14],price_per_one_kg_vegetables[14])\n",
    "onion = collectProduce(product_type_vegetables[15],produce_lifetime_days_vegetables[15],price_per_one_kg_vegetables[15])\n",
    "parsnip = collectProduce(product_type_vegetables[16],produce_lifetime_days_vegetables[16],price_per_one_kg_vegetables[16])\n",
    "potato = collectProduce(product_type_vegetables[17],produce_lifetime_days_vegetables[17],price_per_one_kg_vegetables[17])\n",
    "spinach = collectProduce(product_type_vegetables[18],produce_lifetime_days_vegetables[18],price_per_one_kg_vegetables[18])\n",
    "tomato = collectProduce(product_type_vegetables[19],produce_lifetime_days_vegetables[19],price_per_one_kg_vegetables[19])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total overhead cost subtracted from the total cost of 60,000 kg of vegetables.\n",
    "artichoke_min_overhead = getProducePriceMinOverhead(wheat, total_kg)\n",
    "asparagus_min_overhead = getProducePriceMinOverhead(asparagus, total_kg)\n",
    "garlic_min_overhead = getProducePriceMinOverhead(garlic, total_kg)\n",
    "green_beans_min_overhead = getProducePriceMinOverhead(green_beans, total_kg)\n",
    "beets_min_overhead = getProducePriceMinOverhead(beets, total_kg)\n",
    "bell_peppers_min_overhead = getProducePriceMinOverhead(bell_peppers, total_kg)\n",
    "broccoli_min_overhead = getProducePriceMinOverhead(broccoli, total_kg)\n",
    "brussel_sprouts_min_overhead = getProducePriceMinOverhead(brussel_sprouts, total_kg)\n",
    "cabbage_min_overhead = getProducePriceMinOverhead(cabbage, total_kg)\n",
    "carrots_min_overhead = getProducePriceMinOverhead(carrots, total_kg)\n",
    "cauliflower_min_overhead = getProducePriceMinOverhead(cauliflower, total_kg)\n",
    "celery_min_overhead = getProducePriceMinOverhead(celery, total_kg)\n",
    "cucumber_min_overhead = getProducePriceMinOverhead(cucumber, total_kg)\n",
    "kale_min_overhead = getProducePriceMinOverhead(kale, total_kg)\n",
    "lettuce_min_overhead = getProducePriceMinOverhead(lettuce, total_kg)\n",
    "onion_min_overhead = getProducePriceMinOverhead(onion, total_kg)\n",
    "parsnip_min_overhead = getProducePriceMinOverhead(parsnip, total_kg)\n",
    "potato_min_overhead = getProducePriceMinOverhead(potato, total_kg)\n",
    "spinach_min_overhead = getProducePriceMinOverhead(spinach, total_kg)\n",
    "tomato_min_overhead = getProducePriceMinOverhead(tomato, total_kg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adjusted cost per unit of 60,000 kg of produce after subtracting overhead.\n",
    "adj_artichoke = artichoke_min_overhead / total_kg\n",
    "adj_asparagus = asparagus_min_overhead / total_kg\n",
    "adj_garlic = garlic_min_overhead / total_kg\n",
    "adj_green_beans = green_beans_min_overhead / total_kg\n",
    "adj_beets = beets_min_overhead / total_kg\n",
    "adj_bell_peppers = bell_peppers_min_overhead / total_kg\n",
    "adj_broccoli = broccoli_min_overhead / total_kg\n",
    "adj_brussel_sprouts = brussel_sprouts_min_overhead / total_kg\n",
    "adj_cabbage = cabbage_min_overhead / total_kg\n",
    "adj_carrots = carrots_min_overhead / total_kg\n",
    "adj_cauliflower = cauliflower_min_overhead / total_kg\n",
    "adj_celery = celery_min_overhead / total_kg\n",
    "adj_cucumber = cucumber_min_overhead / total_kg \n",
    "adj_kale = kale_min_overhead / total_kg\n",
    "adj_lettuce = lettuce_min_overhead / total_kg\n",
    "adj_onion = onion_min_overhead / total_kg\n",
    "adj_parsnip = parsnip_min_overhead / total_kg\n",
    "adj_potato = potato_min_overhead / total_kg\n",
    "adj_spinach = spinach_min_overhead / total_kg\n",
    "adj_tomato = tomato_min_overhead / total_kg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#note: personnel get paid 1K CAD and 2.6 kg of free produce of their choice per month with this current process\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
